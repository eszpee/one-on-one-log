FROM node:20-slim as builder

WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Clean install dependencies with platform-specific handling for Rollup
# This addresses the known issue with @rollup/rollup-linux-* dependencies
RUN npm install --no-optional && \
    npm install --platform=linux --arch=x64 @rollup/rollup-linux-x64-gnu || true

# Copy the rest of the application
COPY . .

# Build the application with verbose output for better debugging
RUN npm run build --verbose || (echo "Build failed. Debug output:" && ls -la)

# Check if dist directory exists and has files
RUN if [ -d "dist" ] && [ "$(ls -A dist)" ]; then \
      echo "Build completed successfully. Contents of dist:" && \
      ls -la dist/; \
    else \
      echo "WARNING: Build did not produce expected dist directory or it's empty"; \
    fi

# Second stage - Serve the built application
FROM node:20-slim

WORKDIR /app

# Install http-server globally
RUN npm install -g http-server

# Create directory structure
RUN mkdir -p /app/dist /app/static-test

# Copy the static test page as a fallback
COPY static-test /app/static-test/

# Try to copy the built application from the builder stage
# Using separate RUN command with conditional instead of trying to handle in COPY
COPY --from=builder /app/dist /app/dist/ || true

# Script to check and start the server with the appropriate directory
RUN echo '#!/bin/sh\n\
if [ -d "/app/dist" ] && [ "$(ls -A /app/dist)" ]; then\n\
  echo "Starting server with built application (dist directory)"\n\
  exec http-server ./dist -p 8888 --cors -a 0.0.0.0 --spa\n\
else\n\
  echo "WARNING: dist directory not found or empty, using static test page instead"\n\
  exec http-server ./static-test -p 8888 --cors -a 0.0.0.0\n\
fi' > /app/start.sh && chmod +x /app/start.sh

# Expose the application port
EXPOSE 8888

# Start the server using the start script
CMD ["/app/start.sh"]
